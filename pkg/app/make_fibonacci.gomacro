// Пример взят прямо из примеров в репозитории gomacro, но
// исправлена ошибка в примере 
// и добавлено использование импорта для того кода, к-рый мы будем
// генерировать
package app

:import (
	"go/ast"
	"reflect"
)

import "fmt"

:macro makefib(name, typ ast.Node) ast.Node {
	// go/ast.FuncDecl can only represent function declarations
	// where the function name is an *ast.Ident, not a generic ast.Node
	//
	// Work around this limitation by using the name FOO and replacing it below
	ret := ~"{
		~func FOO(n ~,typ) ~,typ {
			if n <= 2 {
    fmt.Println("Trivial case, n = ", n)
				return 1
			}
			return ~,name(n-1) + ~,name(n-2)
		}
	}
	ret.Name = name.(*ast.Ident)
	return ret
}

makefib; Fibint; int
makefib; Fibint32; int32
makefib; Fibint64; int64

makefib; Fibuint; uint
makefib; Fibuint32; uint32
makefib; Fibuint64; uint64
